{"version":3,"sources":["../../../../src/snake-game/models/snake-state.model.js"],"names":[],"mappings":"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","file":"snake-state.model.es5.js","sourcesContent":["'use strict';\nangular.module('snake-byte')\n  .factory('snakeState', snakeStateFactory);\n\nfunction snakeStateFactory($rootScope, gameState, snakeByteConfig) {\n  var service = {\n    segments: [], //x,y,direction, corner (bool)\n    increaseAmt: 5,\n    advanceInterceptors: [hitEdge, hitSegment],\n    length: 10,\n    init: init,\n    getCornerClass: getCornerClass,\n    increaseLength: increaseLength,\n    removeLast: removeLast,\n    advance: advance\n  };\n\n  return service;\n\n  function init() {\n    var startPos = snakeByteConfig.getStartPos();\n\n    service.segments.length = 0;\n\n    startPos[3] = '';\n    service.segments.push(startPos);\n  }\n\n  function increaseLength() {\n    service.length = service.length + service.increaseAmt;\n  }\n\n  function removeLast() {\n    if (service.segments.length >= service.length) {\n      service.segments.pop();\n    }\n  }\n\n  function advance() {\n    var currentCoords = service.segments[0];\n    var nextAdvance = gameState.getNextAdvance();\n    var nextCoords = [];\n    var event;\n\n    nextCoords[0] = currentCoords[0] + nextAdvance[0]; //x\n    nextCoords[1] = currentCoords[1] + nextAdvance[1]; //Y\n    nextCoords[2] = nextAdvance[2]; //direction string\n    nextCoords[3] = 'head'; //corner class\n\n    event = $rootScope.$broadcast('beforeAdvance', nextCoords);\n\n\n\n    if (event.defaultPrevented) {\n      gameState.crash();\n      return;\n    }\n\n    service.getCornerClass(nextCoords[2]);\n\n    service.segments.unshift(nextCoords);\n\n\n    service.removeLast();\n\n  }\n\n  function getCornerClass(nextPos) {\n\n    if (nextPos !== service.segments[0][2]) {\n      service.segments[0][3] = 'corner ' + service.segments[0][2] + '-' + nextPos;\n    } else {\n      service.segments[0][3]= '';\n    }\n\n  }\n\n  // function beforeAdvance(nextX, nextY) {\n  //   var length = service.advanceInterceptors.length;\n  //   var result;\n  //\n  //   for (var i = 0; i < length; i = i + 1) {\n  //     result = service.advanceInterceptors[i](nextX, nextY);\n  //\n  //     if (result === false) {\n  //       return false; //crash\n  //     }\n  //   }\n  // }\n\n  function hitEdge(nextX, nextY) {\n    if (nextX < 0 || nextX > (snakeByteConfig.gridWidth - 1)) {\n      return false;\n    }\n\n    if (nextY < 0 || nextY > (snakeByteConfig.gridHeight - 1)) {\n      return false;\n    }\n  }\n\n  function hitSegment(nextX, nextY) {\n    var length = service.segments.length;\n\n    for (var i = 0; i < length; i = i + 1) {\n      if (service.segments[i][0] === nextX && service.segments[i][1] === nextY) {\n        return false;\n      }\n    }\n  }\n}\n"]}